{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","myStyle","setMyStyle","useState","color","backgroundColor","btnText","setBtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","toggleStyle","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","AboutText","role","toggleMode","htmlFor","Textform","text","setText","Fragment","Mode","heading","value","onChange","event","target","rows","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","split","length","defaultProps","AddText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","BrowserRouter","document","body","setInterval","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.aef12f7a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState(\r\n   {\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    }\r\n    )\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n\r\n    const toggleStyle =()=>{\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({\r\n                color:'white',\r\n        backgroundColor:'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n\r\n            \r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n        backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n        <h1 className=\"my-2\">About us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n            style={myStyle}\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary my-2\">{btnText}</button></div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/About\">\r\n                {props.AboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n          <div className={`form-check form-switch text-{props.Mode==='light'?'dark':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Titless\",\r\n  AboutText: \"About\",\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n  //for upper case\r\nconst handleUpClick=()=>{\r\n    //console.log(\"the button was clicked\" + text);\r\n    let newText=text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"converted to upperCase\",\"success\")\r\n}\r\n// for lower case\r\nconst handleLoClick=()=>{\r\n  let newText=text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"converted to LowerCase\",\"success\")\r\n}\r\n\r\nconst handleClearClick=()=>{\r\n    setText('')\r\n    props.showAlert(\"Text has been cleared\",\"Success\")\r\n}\r\n\r\nconst handleOnChange=(event)=>{\r\n    //console.log(\"the button was clicked\");\r\n    setText(event.target.value);\r\n    \r\n}\r\n\r\n\r\n    const [text, setText] = useState('');\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.Mode==='dark'?'white':'#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n\r\n  {/* <label for=\"myBox\" className=\"form-label\">{prop.AddText}</label> \r\n  handleOnchange is needed so that the value can be edited without which the value will not be edited.\r\n  */}\r\n<textarea className=\"form-control\" id=\"myBox\" value={text} style={{backgroundColor: props.Mode==='dark'?'grey':'white'}} onChange={handleOnChange} rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear text</button>\r\n    </div>\r\n\r\n    <div className=\"container my-3\" style={{color: props.Mode==='dark'?'white':'#042743'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(' ').length-1} words and {text.length} characters</p>\r\n      <p>{0.08*text.split(' ').length}to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nTextform.defaultProps = { \r\n    AddText:\"Enter your text\"\r\n  } ","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n   const capitalize=(word)=>{\r\n    if (!word) {\r\n        return '';\r\n      }\r\n\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\n\n\n\n\n// let name=\"Anushka\";\n\nfunction App() {\n\n  const [Mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n\n    setTimeout(() => {\n      showAlert(null)\n    }, 4000);\n  }\n  \n\n  const toggleMode= ()=>{\n    if(Mode==='light'){\n      setMode ('dark');\n      document.body.style.backgroundColor='grey';\n      showAlert(\"dark mode has been enabled\",\"success\")\n      document.title='Textutils-Dark Mode'\n      \n        setInterval(()=>{\n          document.title='Textutils is amazing ';\n        },2000);\n  \n    }\n\n      \n  else{\n      setMode ('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light mode has been enabled\",\"success\")\n      document.title='Textutils-Light Mode'\n    }\n  }\n\n  return (\n    <>\n     <BrowserRouter>\n      <Navbar title=\"TextUtils\" Mode ={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      \n        <Routes>\n          <Route exact path=\"/\" element={<Textform heading = \"Enter your text to analyse\" Mode ={Mode} showAlert = {showAlert}/>} />\n          <Route exact path=\"about\" element={<About />} />\n        </Routes>\n      </div>\n      </BrowserRouter>\n    \n\n{/* <Navbar title=\"Textutisl\"  AboutText=\"About Textutils\"/> */}\n{/* <Navbar /> */}\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}